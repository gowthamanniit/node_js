Node provides Buffer class which provides instances 
to store raw data similar to an array of integers

Buffer class is a global class that can be accessed in 
an application without importing the buffer module.

Creating Buffers
================
method:1
var buf = new Buffer(10);
method:2
var buf = new Buffer([10, 20, 30, 40, 50]);
method:3
var buf = new Buffer("Simply Easy Learning", "utf-8"); 
//utf-8 is default , extra we can add ascii,...
Writing to Buffers
===================
buf.write(string[, offset][, length][, encoding])

Parameters
=========
string − This is the string data to be written to buffer.

offset − This is the index of the buffer to start writing at. Default value is 0.

length − This is the number of bytes to write. Defaults to buffer.length.

encoding − Encoding to use. 'utf8' is the default encoding.
example
=========
buf = new Buffer(256);
len = buf.write("Simply Easy Learning");

console.log("Octets written : "+  len);

Reading from Buffers
====================
buf.toString([encoding][, start][, end])
example:
=======
buf = new Buffer(26);
for (var i = 0 ; i < 26 ; i++) {
  buf[i] = i + 97;
}

console.log( buf.toString('ascii'));       // outputs: abcdefghijklmnopqrstuvwxyz
console.log( buf.toString('ascii',0,5));   // outputs: abcde
console.log( buf.toString('utf8',0,5));    // outputs: abcde
console.log( buf.toString(undefined,0,5)); // encoding defaults to 'utf8', outputs abcde

Convert Buffer to JSON
======================
var buf = new Buffer('Simply Easy programming');
var json = buf.toJSON(buf);
console.log(json);

concat buffers
==================
var buffer1 = new Buffer('gowthaman ');
var buffer2 = new Buffer('Simply Easy programming');
var buffer3 = Buffer.concat([buffer1,buffer2]);

console.log("buffer3 content: " + buffer3.toString());

compare buffers
=================
var buffer1 = new Buffer('ABC');
var buffer2 = new Buffer('ABCD');
var result = buffer1.compare(buffer2);

if(result < 0) {
   console.log(buffer1 +" comes before " + buffer2);
} else if(result === 0) {
   console.log(buffer1 +" is same as " + buffer2);
} else {
   console.log(buffer1 +" comes after " + buffer2);
}
slice buffer
=============
var buffer1 = new Buffer('learn well programming');

//slicing a buffer
var buffer2 = buffer1.slice(0,9);
console.log("buffer2 content: " + buffer2.toString());
buffer length:
==============
var buffer = new Buffer('Learn Programming');
console.log("buffer length: " + buffer.length);

=======================================================new version =====================================================

buf=new Buffer.alloc(250)                      syntax:  Buffer.alloc(size, fill, encoding);
console.log(buf);  // output: default all value 00
len=buf.write("welcome to gowthaman")
console.log(len)
output: 20
var buf = Buffer.alloc(15, 'a');
console.log(buf);                             
output: <Buffer 61 61 61 ....................>
=============================
var buf = Buffer.allocUnsafe(15);
console.log(buf);  // output: garbage or old buffers value (unsafe)
buf.fill(0);   // empty the butter : all value set to 0
console.log(buf) // all values 00
=============================
var buf = Buffer.from('abcdef');
buf.write('qq',2);                             syntax: buffer.write(value, start, bytes, encoding);
console.log(buf.toString());                   syntax: buffer.toString(encoding, start, end);
output: abqqef
var buf = Buffer.from('abcdef');
for (x of buf.values()) {
  console.log(x);
}
o/p 97 98 99....
String.fromCharCode(ascii value)

=============================
var buf=Buffer.from("abcdefghijklmnopqrstuvwxyz")
for(x of buf.values())
{
    console.log(x,"-")
}
for(x of buf.toString())
{
    console.log(x,"-")
}

task: (insert  middle)
=====
var buf=Buffer.from("abcdefghijklmnopqrstuvwxyz")
var ip="ajithkumar"
var index=3
var totlen=buf.length+ip.length
var buf1=Buffer.alloc(totlen)
console.log(totlen)
buf1.write(ip,index)
console.log(buf1)
console.log(buf1.toString())

var i=-1;
for(x of buf.toString())
{
    ++i
    if(i<index)
    buf1.write(x,i)
    else
    buf1.write(x,i+ip.length)    
}
console.log(buf1.toString())

task: (remove ginven range start and end)
task: (display only vowels)
====  
